1
00:00:00,900 --> 00:00:05,120
美味しいと評判のチョコレート
パンケーキ屋の前にできた行列を

2
00:00:05,120 --> 00:00:07,310
想像してみてください

3
00:00:07,310 --> 00:00:10,410
ここでは最も長く待っている人が
最初にパンケーキを購入して

4
00:00:10,410 --> 00:00:12,970
店を出ることになります

5
00:00:12,970 --> 00:00:14,710
パンケーキを買いたい人は最後尾に並び

6
00:00:14,710 --> 00:00:17,420
列の先頭に並んでいる人だけが
パンケーキを購入して帰ることができます

7
00:00:18,430 --> 00:00:23,520
これは先入れ先出しのデータ構造
あるいはキューと呼ばれるものです

8
00:00:23,520 --> 00:00:26,118
この意味でキューはスタックと
正反対であると言えます

9
00:00:26,118 --> 00:00:30,799
スタックの場合、最後に追加された要素が
取り出されますが

10
00:00:30,800 --> 00:00:33,590
キューでは最も古い要素から順に取り出されます

11
00:00:33,590 --> 00:00:37,400
このことを除けばキューは
スタックとよく似ています

12
00:00:37,400 --> 00:00:38,780
キューに含まれる最初の要素

13
00:00:38,780 --> 00:00:42,000
あるいは最も古い要素を先頭と言い

14
00:00:42,000 --> 00:00:45,480
最後の要素、あるいは最新の要素を

15
00:00:45,480 --> 00:00:46,199
末尾と言います

16
00:00:47,250 --> 00:00:51,650
末尾に要素を追加する操作はエンキュー

17
00:00:51,650 --> 00:00:55,769
先頭の要素を削除する操作は
デキューと呼ばれます

18
00:00:55,770 --> 00:00:59,490
先頭の要素を見るだけで
実際には削除しない操作は

19
00:00:59,490 --> 00:01:01,420
ピークと呼ばれます

20
00:01:01,420 --> 00:01:05,180
このデータ構造を
連結リストに組み込み

21
00:01:05,180 --> 00:01:07,910
先頭と末尾に関する参照を
保存しておけば

22
00:01:07,910 --> 00:01:11,380
これら両方に対して一定時間の
ルックアップを行えるようになります

23
00:01:11,380 --> 00:01:15,420
よく目にする特殊なキューが
2 種類あります

24
00:01:15,420 --> 00:01:20,100
1 つはデックまたは両端キューと
呼ばれる双方向のキューで

25
00:01:20,100 --> 00:01:23,169
先頭と末尾のどちらでも
エンキューやデキューができます

26
00:01:23,170 --> 00:01:24,260
デックはスタックとキューの

27
00:01:24,260 --> 00:01:28,830
両方を一般化したようなもので

28
00:01:28,830 --> 00:01:33,600
スタックのように同じ終端に
要素を追加したり削除することが

29
00:01:33,600 --> 00:01:36,910
できると同時にキューのように
一方の終端に要素を追加して

30
00:01:36,910 --> 00:01:40,429
もう一方の終端から要素を
削除することも可能です

31
00:01:41,450 --> 00:01:44,400
もう 1 つは優先度付きキューです

32
00:01:44,400 --> 00:01:46,790
優先度付きキューでは
各要素をキューに挿入する際に

33
00:01:46,790 --> 00:01:50,260
数値の優先度を割り当てます

34
00:01:50,260 --> 00:01:54,450
そして、デキューする際には優先度が
最も高い要素を削除します

35
00:01:54,450 --> 00:01:57,500
これは、最も古い要素を最初に
削除する通常のキューの

36
00:01:57,500 --> 00:01:59,850
ルールに反していますが

37
00:01:59,850 --> 00:02:02,640
要素に割り当てられた
優先度が同じであれは

38
00:02:02,640 --> 00:02:05,340
最も古い要素が最初に
デキューされます

